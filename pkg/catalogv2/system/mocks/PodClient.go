// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	generic "github.com/rancher/wrangler/v3/pkg/generic"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	mock "github.com/stretchr/testify/mock"

	rest "k8s.io/client-go/rest"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/api/core/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// PodClient is an autogenerated mock type for the PodClient type
type PodClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *PodClient) Create(_a0 *v1.Pod) (*v1.Pod, error) {
	ret := _m.Called(_a0)

	var r0 *v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Pod) (*v1.Pod, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*v1.Pod) *v1.Pod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Pod) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: namespace, name, options
func (_m *PodClient) Delete(namespace string, name string, options *metav1.DeleteOptions) error {
	ret := _m.Called(namespace, name, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *metav1.DeleteOptions) error); ok {
		r0 = rf(namespace, name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: namespace, name, options
func (_m *PodClient) Get(namespace string, name string, options metav1.GetOptions) (*v1.Pod, error) {
	ret := _m.Called(namespace, name, options)

	var r0 *v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, metav1.GetOptions) (*v1.Pod, error)); ok {
		return rf(namespace, name, options)
	}
	if rf, ok := ret.Get(0).(func(string, string, metav1.GetOptions) *v1.Pod); ok {
		r0 = rf(namespace, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, metav1.GetOptions) error); ok {
		r1 = rf(namespace, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: namespace, opts
func (_m *PodClient) List(namespace string, opts metav1.ListOptions) (*v1.PodList, error) {
	ret := _m.Called(namespace, opts)

	var r0 *v1.PodList
	var r1 error
	if rf, ok := ret.Get(0).(func(string, metav1.ListOptions) (*v1.PodList, error)); ok {
		return rf(namespace, opts)
	}
	if rf, ok := ret.Get(0).(func(string, metav1.ListOptions) *v1.PodList); ok {
		r0 = rf(namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PodList)
		}
	}

	if rf, ok := ret.Get(1).(func(string, metav1.ListOptions) error); ok {
		r1 = rf(namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: namespace, name, pt, data, subresources
func (_m *PodClient) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1.Pod, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, namespace, name, pt, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, types.PatchType, []byte, ...string) (*v1.Pod, error)); ok {
		return rf(namespace, name, pt, data, subresources...)
	}
	if rf, ok := ret.Get(0).(func(string, string, types.PatchType, []byte, ...string) *v1.Pod); ok {
		r0 = rf(namespace, name, pt, data, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, types.PatchType, []byte, ...string) error); ok {
		r1 = rf(namespace, name, pt, data, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *PodClient) Update(_a0 *v1.Pod) (*v1.Pod, error) {
	ret := _m.Called(_a0)

	var r0 *v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Pod) (*v1.Pod, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*v1.Pod) *v1.Pod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Pod) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: _a0
func (_m *PodClient) UpdateStatus(_a0 *v1.Pod) (*v1.Pod, error) {
	ret := _m.Called(_a0)

	var r0 *v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Pod) (*v1.Pod, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*v1.Pod) *v1.Pod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Pod) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: namespace, opts
func (_m *PodClient) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(namespace, opts)

	var r0 watch.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(string, metav1.ListOptions) (watch.Interface, error)); ok {
		return rf(namespace, opts)
	}
	if rf, ok := ret.Get(0).(func(string, metav1.ListOptions) watch.Interface); ok {
		r0 = rf(namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(string, metav1.ListOptions) error); ok {
		r1 = rf(namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithImpersonation provides a mock function with given fields: impersonate
func (_m *PodClient) WithImpersonation(impersonate rest.ImpersonationConfig) (generic.ClientInterface[*v1.Pod, *v1.PodList], error) {
	ret := _m.Called(impersonate)

	var r0 generic.ClientInterface[*v1.Pod, *v1.PodList]
	var r1 error
	if rf, ok := ret.Get(0).(func(rest.ImpersonationConfig) (generic.ClientInterface[*v1.Pod, *v1.PodList], error)); ok {
		return rf(impersonate)
	}
	if rf, ok := ret.Get(0).(func(rest.ImpersonationConfig) generic.ClientInterface[*v1.Pod, *v1.PodList]); ok {
		r0 = rf(impersonate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generic.ClientInterface[*v1.Pod, *v1.PodList])
		}
	}

	if rf, ok := ret.Get(1).(func(rest.ImpersonationConfig) error); ok {
		r1 = rf(impersonate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPodClient creates a new instance of PodClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPodClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PodClient {
	mock := &PodClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
