// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	action "helm.sh/helm/v3/pkg/action"

	release "helm.sh/helm/v3/pkg/release"
)

// HelmClient is an autogenerated mock type for the HelmClient type
type HelmClient struct {
	mock.Mock
}

// ListReleases provides a mock function with given fields: namespace, name, stateMask
func (_m *HelmClient) ListReleases(namespace string, name string, stateMask action.ListStates) ([]*release.Release, error) {
	ret := _m.Called(namespace, name, stateMask)

	var r0 []*release.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, action.ListStates) ([]*release.Release, error)); ok {
		return rf(namespace, name, stateMask)
	}
	if rf, ok := ret.Get(0).(func(string, string, action.ListStates) []*release.Release); ok {
		r0 = rf(namespace, name, stateMask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, action.ListStates) error); ok {
		r1 = rf(namespace, name, stateMask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHelmClient creates a new instance of HelmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHelmClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HelmClient {
	mock := &HelmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
