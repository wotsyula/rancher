apiVersion: management.cattle.io/v3
kind: Cluster
metadata:
  annotations:
    authz.management.cattle.io/creator-role-bindings: '{"created":["cluster-owner"],"required":["cluster-owner"]}'
    field.cattle.io/creatorId: user-rgtsq
    lifecycle.cattle.io/create.cluster-agent-controller-cleanup: "true"
    lifecycle.cattle.io/create.cluster-provisioner-controller: "true"
    lifecycle.cattle.io/create.cluster-scoped-gc: "true"
    lifecycle.cattle.io/create.mgmt-cluster-rbac-remove: "true"
  creationTimestamp: "2022-08-15T21:51:40Z"
  finalizers:
    - wrangler.cattle.io/mgmt-cluster-remove
    - controller.cattle.io/cluster-agent-controller-cleanup
    - controller.cattle.io/cluster-scoped-gc
    - controller.cattle.io/cluster-provisioner-controller
    - controller.cattle.io/mgmt-cluster-rbac-remove
  generateName: c-
  generation: 13
  labels:
    cattle.io/creator: norman
  name: c-r64vb
  resourceVersion: "362231"
  uid: ced870a2-50a7-4c12-ba8c-ef84e6616fbf
spec:
  agentImageOverride: ""
  answers: {}
  clusterSecrets: {}
  description: ""
  desiredAgentImage: ""
  desiredAuthImage: ""
  displayName: eks-test
  dockerRootDir: /var/lib/docker
  eksConfig:
    amazonCredentialSecret: cattle-global-data:cc-kxfmx
    displayName: eks-test
    imported: false
    kmsKey: ""
    kubernetesVersion: "1.22"
    loggingTypes: []
    nodeGroups:
      - arm: false
        desiredSize: 2
        diskSize: 20
        ec2SshKey: ""
        gpu: false
        imageId: ""
        instanceType: t3.medium
        labels: {}
        launchTemplate: null
        maxSize: 2
        minSize: 2
        nodeRole: null
        nodegroupName: nodegroup
        requestSpotInstances: false
        resourceTags: {}
        spotInstanceTypes: []
        subnets: []
        tags: {}
        userData: ""
        version: "1.22"
    privateAccess: false
    publicAccess: true
    publicAccessSources: []
    ebsCSIDriver: false
    region: us-east-2
    secretsEncryption: false
    securityGroups: []
    serviceRole: ""
    subnets: []
    tags: {}
  enableClusterAlerting: false
  enableClusterMonitoring: false
  enableNetworkPolicy: false
  fleetWorkspaceName: fleet-default
  internal: false
  localClusterAuthEndpoint:
    enabled: false
  windowsPreferedCluster: false
status:
  conditions:
    - lastUpdateTime: "2022-08-15T17:51:47-04:00"
      message: Waiting on eks crd to be initialized
      status: Unknown
      type: Provisioned
  driver: EKS
  generatedNodeRole: "arn:aws:iam::role/test"
