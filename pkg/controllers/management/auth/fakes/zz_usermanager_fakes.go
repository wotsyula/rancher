// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/rancher/pkg/user (interfaces: Manager)

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	types "github.com/rancher/norman/types"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	user "github.com/rancher/rancher/pkg/user"
	types0 "k8s.io/apimachinery/pkg/types"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CheckAccess mocks base method.
func (m *MockManager) CheckAccess(arg0 string, arg1 []string, arg2 string, arg3 []v3.Principal) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockManagerMockRecorder) CheckAccess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockManager)(nil).CheckAccess), arg0, arg1, arg2, arg3)
}

// CreateNewUserClusterRoleBinding mocks base method.
func (m *MockManager) CreateNewUserClusterRoleBinding(arg0 string, arg1 types0.UID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUserClusterRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewUserClusterRoleBinding indicates an expected call of CreateNewUserClusterRoleBinding.
func (mr *MockManagerMockRecorder) CreateNewUserClusterRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUserClusterRoleBinding", reflect.TypeOf((*MockManager)(nil).CreateNewUserClusterRoleBinding), arg0, arg1)
}

// DeleteToken mocks base method.
func (m *MockManager) DeleteToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockManagerMockRecorder) DeleteToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockManager)(nil).DeleteToken), arg0)
}

// EnsureClusterToken mocks base method.
func (m *MockManager) EnsureClusterToken(arg0 string, arg1 user.TokenInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureClusterToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureClusterToken indicates an expected call of EnsureClusterToken.
func (mr *MockManagerMockRecorder) EnsureClusterToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureClusterToken", reflect.TypeOf((*MockManager)(nil).EnsureClusterToken), arg0, arg1)
}

// EnsureToken mocks base method.
func (m *MockManager) EnsureToken(arg0 user.TokenInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureToken indicates an expected call of EnsureToken.
func (mr *MockManagerMockRecorder) EnsureToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureToken", reflect.TypeOf((*MockManager)(nil).EnsureToken), arg0)
}

// EnsureUser mocks base method.
func (m *MockManager) EnsureUser(arg0, arg1 string) (*v3.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUser", arg0, arg1)
	ret0, _ := ret[0].(*v3.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureUser indicates an expected call of EnsureUser.
func (mr *MockManagerMockRecorder) EnsureUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUser", reflect.TypeOf((*MockManager)(nil).EnsureUser), arg0, arg1)
}

// GetKubeconfigToken mocks base method.
func (m *MockManager) GetKubeconfigToken(arg0, arg1, arg2, arg3, arg4 string, arg5 v3.Principal) (*v3.Token, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeconfigToken", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*v3.Token)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKubeconfigToken indicates an expected call of GetKubeconfigToken.
func (mr *MockManagerMockRecorder) GetKubeconfigToken(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeconfigToken", reflect.TypeOf((*MockManager)(nil).GetKubeconfigToken), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetUser mocks base method.
func (m *MockManager) GetUser(arg0 *types.APIContext) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockManagerMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockManager)(nil).GetUser), arg0)
}

// GetUserByPrincipalID mocks base method.
func (m *MockManager) GetUserByPrincipalID(arg0 string) (*v3.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPrincipalID", arg0)
	ret0, _ := ret[0].(*v3.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPrincipalID indicates an expected call of GetUserByPrincipalID.
func (mr *MockManagerMockRecorder) GetUserByPrincipalID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPrincipalID", reflect.TypeOf((*MockManager)(nil).GetUserByPrincipalID), arg0)
}

// SetPrincipalOnCurrentUser mocks base method.
func (m *MockManager) SetPrincipalOnCurrentUser(arg0 *types.APIContext, arg1 v3.Principal) (*v3.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrincipalOnCurrentUser", arg0, arg1)
	ret0, _ := ret[0].(*v3.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPrincipalOnCurrentUser indicates an expected call of SetPrincipalOnCurrentUser.
func (mr *MockManagerMockRecorder) SetPrincipalOnCurrentUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrincipalOnCurrentUser", reflect.TypeOf((*MockManager)(nil).SetPrincipalOnCurrentUser), arg0, arg1)
}

// SetPrincipalOnCurrentUserByUserID mocks base method.
func (m *MockManager) SetPrincipalOnCurrentUserByUserID(arg0 string, arg1 v3.Principal) (*v3.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrincipalOnCurrentUserByUserID", arg0, arg1)
	ret0, _ := ret[0].(*v3.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPrincipalOnCurrentUserByUserID indicates an expected call of SetPrincipalOnCurrentUserByUserID.
func (mr *MockManagerMockRecorder) SetPrincipalOnCurrentUserByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrincipalOnCurrentUserByUserID", reflect.TypeOf((*MockManager)(nil).SetPrincipalOnCurrentUserByUserID), arg0, arg1)
}
